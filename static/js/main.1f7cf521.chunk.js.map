{"version":3,"sources":["components/Loader/Loader.js","components/UserData/UserData.js","App.js","serviceWorker.js","index.js"],"names":["Loader","role","className","UserData","data","src","avatar_url","alt","name","location","bio","created_at","App","myObject","useState","showLoader","setShowLoader","username","setUsername","hasError","setHasError","userData","setUserData","onSubmit","e","preventDefault","fetch","then","res","json","catch","err","htmlFor","type","id","onChange","target","value","data-testid","Object","entries","length","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"wQASeA,G,MANA,WACX,OACI,yBAAKC,KAAK,QAAQC,UAAU,aC0BrBC,G,MA5BE,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACf,OACI,yBAAKF,UAAU,aACf,yBAAKG,IAAKD,EAAKE,WAAYC,IAAKH,EAAKI,OACrC,+BACE,+BACE,4BACE,4BAAI,0CACJ,4BAAKJ,EAAKI,OAEZ,4BACE,4BAAI,uDACJ,4BAAKJ,EAAKK,WAEZ,4BACE,4BAAI,yCACJ,4BAAKL,EAAKM,MAEZ,4BACE,4BAAI,sDACJ,4BAAKN,EAAKO,kBCuBTC,G,MAxCH,WAAO,IAsBMC,EAtBP,EACoBC,oBAAS,GAD7B,mBACTC,EADS,KACGC,EADH,OAEgBF,mBAAS,IAFzB,mBAETG,EAFS,KAECC,EAFD,OAGgBJ,oBAAS,GAHzB,mBAGTK,EAHS,KAGCC,EAHD,OAIgBN,mBAAS,IAJzB,mBAITO,EAJS,KAICC,EAJD,KA0BhB,OACE,yBAAKpB,UAAU,OACb,0BAAMqB,SArBS,SAACC,GAClBA,EAAEC,iBACFT,GAAc,GACdU,MAAM,gCAAD,OAAiCT,IACjCU,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAvB,GACJkB,EAAYlB,GACZY,GAAc,MAEfc,OAAM,SAACC,GACNX,EAAY,8BACZJ,GAAc,OAUUd,UAAU,oBACpC,2BAAO8B,QAAQ,cAAc9B,UAAU,qBAAvC,oCACA,2BAAO+B,KAAK,OAAOC,GAAG,cAAchC,UAAU,oBAAoBiC,SAAU,SAAAX,GAAC,OAAEN,EAAYM,EAAEY,OAAOC,UACpG,4BAAQJ,KAAK,SAAS/B,UAAU,cAAhC,WAEDa,GAAc,kBAAC,EAAD,MACdI,GAAY,uBAAGmB,cAAY,iBAAiBnB,IAZ1BN,EAaJQ,EAZVkB,OAAOC,QAAQ3B,GAAU4B,OAAS,GAYX,kBAAC,EAAD,CAAUrC,KAAMiB,QC7B9BqB,QACW,cAA7BC,OAAOlC,SAASmC,UAEe,UAA7BD,OAAOlC,SAASmC,UAEhBD,OAAOlC,SAASmC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdzB,OAAM,SAAA0B,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1f7cf521.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.css';\n\nconst Loader = () => {\n    return (\n        <div role=\"alert\" className=\"loader\"></div>\n      );\n}\n\nexport default Loader","import React from 'react';\nimport './UserData.css';\n\nconst UserData = ({data}) => {\n    return (\n        <div className=\"user-data\">\n        <img src={data.avatar_url} alt={data.name}/>\n        <table>\n          <tbody>\n            <tr>\n              <td><strong>Name:</strong></td>\n              <td>{data.name}</td>\n            </tr>\n            <tr>\n              <td><strong>Localização:</strong></td>\n              <td>{data.location}</td>\n            </tr>\n            <tr>\n              <td><strong>Bio:</strong></td>\n              <td>{data.bio}</td>\n            </tr>\n            <tr>\n              <td><strong>Perfil criado em:</strong></td>\n              <td>{data.created_at}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      );\n}\n\nexport default UserData","import React, { useState } from 'react';\nimport Loader from './components/Loader/Loader'\nimport UserData from './components/UserData/UserData'\n\nimport './App.css';\n\nconst App = () => {\n  const [showLoader, setShowLoader] = useState(false)\n  const [username, setUsername] = useState('')\n  const [hasError, setHasError] = useState(false)\n  const [userData, setUserData] = useState({})\n\n\n  const handleForm = (e) => {\n    e.preventDefault();\n    setShowLoader(true)\n    fetch(`https://api.github.com/users/${username}`)\n        .then(res => res.json())\n        .then(data => {\n          setUserData(data)\n          setShowLoader(false)\n        })\n        .catch((err) => {\n          setHasError('Ooops... Deu alguma merda.')\n          setShowLoader(false)\n        })\n  }\n\n  const isObjectEmpty = (myObject) => {\n    return Object.entries(myObject).length > 0\n  }\n\n  return (\n    <div className=\"app\">\n      <form onSubmit={handleForm} className=\"form-github-user\">\n        <label htmlFor=\"github-user\" className=\"label-github-user\">Digite seu usuário do Github:</label>\n        <input type=\"text\" id=\"github-user\" className=\"input-github-user\" onChange={e=>setUsername(e.target.value)}/>\n        <button type=\"submit\" className=\"btn-submit\">Enviar</button>\n      </form>\n      {showLoader && <Loader/>}\n      {hasError && <p data-testid=\"error-message\">{hasError}</p>}\n      {isObjectEmpty(userData) && <UserData data={userData} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}